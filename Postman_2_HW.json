
	"info": {
		"_postman_id": "a1d1d935-11e9-47dd-ae97-41d13c062f6c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resp_JSON = pm.response.json();//всё body в переменную resp_JSON\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test Name\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql('Nata');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test Age\", function () {\r",
							"    pm.expect(resp_JSON.age).to.eql(\"35\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test Salary\", function () {\r",
							"    pm.expect(resp_JSON.salary).to.eql(400);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req_JSON = request.data;//всё form.data в переменную resp_JSON (для POST)\r",
							"//pm.request.body.formdata.get\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_Resp is Name_Req\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql(req_JSON.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_Resp is Age_Req\", function () {\r",
							"       pm.expect(resp_JSON.age).to.eql(req_JSON.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_resp is_Salary_req\", function () {\r",
							"    pm.expect(resp_JSON.salary).to.eql(+(req_JSON.salary));\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family :\", resp_JSON.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary_1.5 is_Salary*4\", function () {\r",
							"    pm.expect(resp_JSON.family.u_salary_1_5_year).to.eql(req_JSON.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						},
						{
							"key": "family",
							"value": "Kisel-Zagoryanskye",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is nice. It is 200!))\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resp_JSON = pm.response.json();//всё body в переменную resp_JSON\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req_JSON = pm.request.url.query.toObject(); //парсим реквест из url\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Nataly's Name is parsed\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql(req_JSON.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Nataly's Age is parsed\", function(){\r",
							"    pm.expect(resp_JSON.age).to.eql(req_JSON.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Nataly's Salary is parsed\", function(){\r",
							"    pm.expect(resp_JSON.salary).to.eql(+(req_JSON.salary));\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(\"family :\", req_JSON.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"        pm.expect(resp_JSON.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has a age\", function () {\r",
							"        pm.expect(resp_JSON.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"        pm.expect(resp_JSON.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age is 4\", function () {\r",
							"        pm.expect(resp_JSON.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nata&age=35&salary=400&family=Kisel-Zagoryanskye",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nata"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "400"
						},
						{
							"key": "family",
							"value": "Kisel-Zagoryanskye"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp_JSON = pm.response.json();//всё body в переменную resp_JSON\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req_JSON = pm.request.url.query.toObject(); //парсим реквест из url\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Response name is Request name\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql(req_JSON.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Response age is Request age\", function () {\r",
							"    pm.expect(resp_JSON.age).to.eql(parseInt(req_JSON.age));\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Req_Salary is:\", req_JSON.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Resp_Salary is:\", resp_JSON.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Resp_Salary_Min is:\", resp_JSON.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Resp_Salary_Mid is:\", resp_JSON.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Resp_Salary_Max is:\", resp_JSON.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Resp_Salary_Min is Req_Salary\", function () {\r",
							"    pm.expect(resp_JSON.salary[0]).to.eql(parseInt(req_JSON.salary));\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_Salary_Mid is Req_Salary*2\", function () {\r",
							"    pm.expect(parseInt(resp_JSON.salary[1])).to.eql(req_JSON.salary*2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_Salary_Max is Req_Salary*3\", function () {\r",
							"    pm.expect(parseInt(resp_JSON.salary[2])).to.eql(req_JSON.salary*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"var resp_JSON = pm.request.url.query.toObject();\r",
							"pm.environment.set(\"name\", resp_JSON.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"var resp_JSON = pm.request.url.query.toObject();\r",
							"pm.environment.set(\"age\", resp_JSON.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"var resp_JSON = pm.request.url.query.toObject();\r",
							"pm.environment.set(\"salary\", resp_JSON.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let key in pm.response.json().salary) {\r",
							"\tconsole.log(key + \" element: \" + pm.response.json().salary[key]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nata&age=35&salary=400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nata"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request (переменные занесены в окружение через request)\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var resp_JSON = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req_JSON = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start_QA_salary exists\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"QA_salary_after_6_months exists\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"QA_salary_after_12_months exists\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"QA_salary_after_1.5_year exists\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"QA_salary_after_3.5_years exists\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person exists\", function () {\r",
							"    pm.expect(resp_JSON).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary is Salary из request\", function () {\r",
							"    pm.expect(resp_JSON.start_qa_salary).to.eql(+(req_JSON.salary));\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_6_months is salary*2 из request\", function () {\r",
							"    pm.expect(resp_JSON.qa_salary_after_6_months).to.eql(req_JSON.salary*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_12_months is salary*2.7 из request\", function () {\r",
							"    pm.expect(resp_JSON.qa_salary_after_12_months).to.eql(req_JSON.salary*2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_1.5_year is salary*3.3 из request\", function () {\r",
							"    pm.expect(resp_JSON['qa_salary_after_1.5_year']).to.eql(req_JSON.salary*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_3.5_years is salary*3.8 из request\", function () {\r",
							"    pm.expect(resp_JSON['qa_salary_after_3.5_years']).to.eql(req_JSON.salary*3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"QA_salary_after_12_months is salary*2.7 из request\", function () {\r",
							"    pm.expect(resp_JSON.qa_salary_after_12_months).to.eql(req_JSON.salary*2.7);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"U_age is age из request\", function () {\r",
							"    pm.expect(resp_JSON.person.u_age).to.eql(+(req_JSON.age));\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"U_salary_5_years is salary*4.2 из request\", function () {\r",
							"    pm.expect(resp_JSON.person.u_salary_5_years).to.eql(+(req_JSON.salary*4.2));\r",
							"});\r",
							"\r",
							"//22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let key in resp_JSON.person) {\r",
							"  console.log(\"resp_JSON.person.\" + key + \" = \" + resp_JSON.person[key]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}